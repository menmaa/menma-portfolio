name: Build Image and Deploy to Lambda

on:
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY_NAME: menma-portfolio
  ECR_IMAGE_TAG: fm
  DOMAIN_NAME: fotismakris.com
  CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
  TURNSTILE_SITE_KEY: ${{ vars.TURNSTILE_SITE_KEY }}
  HCAPTCHA_SITE_KEY: ${{ vars.HCAPTCHA_SITE_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write
      contents: read

    steps: 
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ***REMOVED***
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./app
          secret-envs: |
            turnstile_site_key=TURNSTILE_SITE_KEY
            hcaptcha_site_key=HCAPTCHA_SITE_KEY
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.ECR_IMAGE_TAG }}
          platforms: linux/amd64
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ***REMOVED***
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize and Deploy Terraform
        run: |
          cd terraform
          terraform init
          terraform apply \
            -var 'image_repository=${{ env.ECR_REPOSITORY_NAME }}' \
            -var 'image_tag=${{ env.ECR_IMAGE_TAG }}' \
            -var 'domain_name=${{ env.DOMAIN_NAME }}' \
            -var 'cloudflare_account_id=${{ env.CLOUDFLARE_ACCOUNT_ID }}' \
            -var 'cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}' \
            -auto-approve