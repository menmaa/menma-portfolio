name: Build Image and Deploy to Lambda

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY_NAME: menma-portfolio
  DOMAIN_NAME: menma.dev
  CLOUDFLARE_ZONE_ID: ${{ vars.CLOUDFLARE_ZONE_ID }}
  CLOUDFLARE_API_SECRET: ${{ secrets.CLOUDFLARE_API_SECRET }}
  TURNSTILE_SITE_KEY: ${{ vars.TURNSTILE_SITE_KEY }}
  HCAPTCHA_SITE_KEY: ${{ vars.HCAPTCHA_SITE_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write
      contents: read

    steps: 
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ***REMOVED***
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set ECR image URI
        id: ecr
        run: |
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:latest" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_URI --secret id=TURNSTILE_SITE_KEY --secret id=HCAPTCHA_SITE_KEY ./app
          docker push $IMAGE_URI
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ***REMOVED***
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set ECR image URI
        run: |
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:latest" >> $GITHUB_ENV

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize and Deploy Terraform
        run: |
          cd terraform
          terraform init
          terraform apply \
            -var 'image_uri=${{ env.IMAGE_URI }}' \
            -var 'domain_name=${{ env.DOMAIN_NAME }}' \
            -var 'cloudflare_zone_id=${{ env.CLOUDFLARE_ZONE_ID }}' \
            -var 'cloudflare_api_key=${{ env.CLOUDFLARE_API_SECRET }}' \
            -auto-approve